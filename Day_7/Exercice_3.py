# Exo 1 Convertir les Ã¢ges en set et comparer
ages = [22, 19, 24, 25, 26, 24, 25, 24]

ages_set = set(ages)
print("Liste complÃ¨te :", ages)
print("Ensemble unique :", ages_set)

print("Longueur liste :", len(ages))        # RÃ©sultat : 8
print("Longueur ensemble :", len(ages_set)) # RÃ©sultat : 5

# ğŸ’¡ La liste est plus longue car elle contient des doublons.
# Le set ne conserve que les Ã¢ges uniques â€” utile pour analyser des donnÃ©es sans rÃ©pÃ©tition.

# Exo 2 DiffÃ©rences entre les types de donnÃ©es
data_types = {
    "string": "chaÃ®ne de caractÃ¨res, sÃ©quence immuable d'Ã©lÃ©ments",
    "list": "collection ordonnÃ©e, modifiable et indexÃ©e",
    "tuple": "collection ordonnÃ©e, immuable",
    "set": "collection non ordonnÃ©e, non indexÃ©e, sans doublons"
}

print("\nğŸ“˜ Comparaison des types de donnÃ©es :")
for dtype, definition in data_types.items():
    print(f"- {dtype}: {definition}")

# ğŸ’¡ Chaque type a ses usages : les strings pour du texte, les listes pour des collections dynamiques,
# les tuples pour des donnÃ©es fixes, et les sets pour du tri/filtrage sans doublons.

# Exo 3 Compter les mots uniques dâ€™une phrase
phrase = "I am a teacher and I love to inspire and teach people"
words = phrase.split()
unique_words = set(words)

print("\nPhrase :", phrase)
print("Mots uniques :", unique_words)
print("Nombre de mots uniques :", len(unique_words))  # RÃ©sultat : 10

# ğŸ’¡ Application rÃ©elle : retirer les doublons dans un corpus de mots, analyser la richesse lexicale...
